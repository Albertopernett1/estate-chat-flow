import React, { useState } from "react";
import { 
  Send, 
  Paperclip, 
  Image, 
  Search, 
  ChevronDown,
  File
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";

type MessageProps = {
  content: string;
  sender: "user" | "agent";
  timestamp: Date;
  channelType?: "WhatsApp" | "Telegram" | "Web";
  attachments?: {
    type: "image" | "document";
    name: string;
    size?: string;
    url?: string;
  }[];
};

const ChatMessage = ({ content, sender, timestamp, channelType, attachments }: MessageProps) => {
  return (
    <div className={cn("flex flex-col", sender === "agent" ? "items-end" : "items-start")}>
      {channelType && sender === "user" && (
        <div className="channel-tag flex items-center gap-1 ml-1">
          <span>via {channelType}</span>
        </div>
      )}
      
      <div 
        className={cn(
          "message-bubble",
          sender === "user" ? "user-message" : "agent-message"
        )}
      >
        {attachments && attachments.length > 0 && (
          <div className="mb-2 space-y-2">
            {attachments.map((attachment, index) => (
              <div 
                key={index}
                className={cn(
                  "p-2 rounded flex items-center gap-2",
                  sender === "user" ? "bg-gray-100" : "bg-estate-dark-purple/20"
                )}
              >
                {attachment.type === "image" ? (
                  <Image size={16} className={sender === "user" ? "text-gray-500" : "text-white"} />
                ) : (
                  <File size={16} className={sender === "user" ? "text-gray-500" : "text-white"} />
                )}
                <div className="flex-1 min-w-0">
                  <p className="text-xs truncate">{attachment.name}</p>
                  {attachment.size && (
                    <p className="text-xs opacity-70">{attachment.size}</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
        
        <p>{content}</p>
      </div>
      
      <span className="text-xs text-gray-500 mt-1 mx-1">
        {format(timestamp, "HH:mm")}
      </span>
    </div>
  );
};

type ChatWindowProps = {
  selectedContactId: string;
};

const ChatWindow = ({ selectedContactId }: ChatWindowProps) => {
  const [message, setMessage] = useState("");
  
  // This would come from a database in a real app
  const conversation = [
    {
      id: "1",
      content: "Can I try the software first?",
      sender: "user" as const,
      timestamp: new Date("2023-06-15T12:38:00"),
      channelType: "WhatsApp" as const,
    },
    {
      id: "2",
      content: "Sure. Here is the demo unit. You can use it as long as you want.",
      sender: "agent" as const,
      timestamp: new Date("2023-06-15T12:40:00"),
      channelType: undefined,
    },
    {
      id: "3",
      content: "Thank you. Now I want to buy the software. Which type of subscription do you have?",
      sender: "user" as const,
      timestamp: new Date("2023-06-15T12:43:00"),
      channelType: "WhatsApp" as const,
    },
    {
      id: "4",
      content: "We have many type of subscription in this presentations. Please look at this showcase.",
      sender: "agent" as const,
      timestamp: new Date("2023-06-15T12:47:00"),
      channelType: undefined,
      attachments: [
        {
          type: "document" as const,
          name: "Presentation.pdf",
          size: "2.5 MB",
        }
      ]
    },
    {
      id: "5",
      content: "Thanks. I will watch it later!",
      sender: "user" as const,
      timestamp: new Date("2023-06-15T12:51:00"),
      channelType: "WhatsApp" as const,
    },
    {
      id: "6",
      content: "You are welcome!",
      sender: "agent" as const,
      timestamp: new Date("2023-06-15T12:53:00"),
      channelType: undefined,
    },
  ];
  
  const handleSendMessage = () => {
    if (message.trim()) {
      // Here we would send the message to the API
      console.log("Sending message:", message);
      setMessage("");
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Suggested responses (would be generated by AI in a real app)
  const suggestedResponses = [
    "Of course! I'll send you the pricing details right away.",
    "Would you like to schedule a property viewing?",
    "I'll check the availability and get back to you."
  ];

  if (!selectedContactId) {
    return (
      <div className="flex-1 flex items-center justify-center bg-estate-light-gray">
        <div className="text-center">
          <h2 className="text-xl font-medium text-gray-700 mb-2">No conversation selected</h2>
          <p className="text-gray-500">Select a contact to start chatting</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col h-screen bg-white">
      {/* Chat header */}
      <div className="border-b p-4 flex justify-between items-center">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded-full overflow-hidden">
            <img src="https://i.pravatar.cc/150?img=1" alt="Contact" className="w-full h-full object-cover" />
          </div>
          <div>
            <h2 className="font-medium">Miguel SÃ¡nchez</h2>
            <p className="text-sm text-gray-500">Online</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button className="p-2 hover:bg-gray-100 rounded-full">
            <Search size={18} className="text-gray-600" />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-full">
            <ChevronDown size={18} className="text-gray-600" />
          </button>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
        {conversation.map((msg) => (
          <ChatMessage
            key={msg.id}
            content={msg.content}
            sender={msg.sender}
            timestamp={msg.timestamp}
            channelType={msg.channelType}
            attachments={msg.attachments}
          />
        ))}
      </div>

      {/* Suggested responses */}
      <div className="px-4 py-2 flex gap-2 overflow-x-auto">
        {suggestedResponses.map((response, index) => (
          <Button 
            key={index}
            variant="outline" 
            size="sm" 
            className="whitespace-nowrap text-xs border-estate-purple/30 text-estate-purple hover:bg-estate-purple/5"
            onClick={() => setMessage(response)}
          >
            {response}
          </Button>
        ))}
      </div>

      {/* Input area */}
      <div className="border-t p-4">
        <div className="flex items-end gap-2">
          <div className="flex-grow">
            <textarea
              className="w-full rounded-lg border border-gray-300 p-3 focus:outline-none focus:ring-1 focus:ring-estate-purple resize-none min-h-[80px]"
              placeholder="Type a message..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyDown={handleKeyDown}
            />
          </div>
          <div className="flex items-center gap-2 pb-2">
            <button className="p-2 hover:bg-gray-100 rounded-full">
              <Paperclip size={20} className="text-gray-500" />
            </button>
            <Button 
              size="sm"
              className="bg-estate-purple hover:bg-estate-dark-purple"
              onClick={handleSendMessage}
            >
              <Send size={18} />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatWindow;
